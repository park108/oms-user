name: Build and Push Docker Image
on:
  push:
    branches:
      - main
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # Download AWS Corretto 17 because GitHub actions not supported this JDK version
      - name: Get latest Corretto URL
        id: get-latest-corretto-url
        run: >-
          echo "::set-output name=URL::$(curl -LIs -o /dev/null -w
          %{url_effective}
          https://corretto.aws/downloads/latest/amazon-corretto-17-x64-linux-jdk.tar.gz)"

      - uses: actions/cache@v2
        id: corretto-cache
        name: Restore Corretto
        with:
          path: ./amazon-corretto-17-x64-linux-jdk.tar.gz
          key: >-
            ${{ runner.os }}-corretto-${{
            steps.get-latest-corretto-url.outputs.URL }}

      - name: Download AWS Corretto
        if: steps.corretto-cache.outputs.cache-hit != 'true'
        run: >-
          wget
          https://corretto.aws/downloads/latest/amazon-corretto-17-x64-linux-jdk.tar.gz

      # Setup downloaded JDK
      - name: Set up JDK 1.17
        uses: actions/setup-java@v2
        with:
          distribution: jdkfile
          java-version: '17'
          architecture: x64
          jdkFile: ./amazon-corretto-17-x64-linux-jdk.tar.gz

      # Setup gradle and build package
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      # Access AWS by credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # Login ECR, then build image and push
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: oms-user
          IMAGE_TAG: 0.0.1
        run: |
          docker buildx build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"